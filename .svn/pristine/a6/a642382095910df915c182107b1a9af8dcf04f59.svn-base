Garrison = {
		MaxXP : {
			chapter1 : 5,
			chapter2 : 20,
			chapter3 : 50,
			chapter4 : 100
		},
		
		MAX_SIZE : 10,
		
		getGarrison : function() {
			var gameState = GamePersist.getGameState();
			if (gameState == null) {
				return null;
			} else {
				return gameState.garrison;
			}
		},
		
		getGarrisonCharacter : function(id) {
			var retval = null;
			var garrison = this.getGarrison();
			for (var i = 0; i < garrison.length; i++) {
				var loopGarrisonCharacter = garrison[i];
				if (loopGarrisonCharacter.id == id) {
					retval = loopGarrisonCharacter;
					break;
				}
			}
			return retval;
		},
		
		updateGameParams : function() {
			var params = {};
			params.heroes = [];
			params.opponents = [];
			$(".selectedGarrisonRow").each(function () {
				var id = $(this).attr("id");
				var garrisonCharacter = Garrison.getGarrisonCharacter(id);
				params.heroes.push(garrisonCharacter);
				
				var experience = garrisonCharacter.experience;
				var randomCharacter = GameHelper.getRandomCharacter(GameHelper.charactersArray);
				var opponent = {
						id : id + "opponent",
						experience : experience,
						characterName :randomCharacter.name
				};
				params.opponents.push(opponent);
			});			
			Game.params = params;
		},
		
		redirectToEnterBattle : function() {
			$("#enterBattlegroundContainer").addClass("readyToEnterBattleground");
			$("#enterBattlegroundContainer").click(function() {
				Garrison.updateGameParams();
				window.location.href='#enterBattle';
			});
		},
		
		redirectToEnterPortal : function() {
			$("#enterPortalContainer").addClass("readyToEnterPortal");
			$("#enterPortalContainer").click(function() {
				Garrison.updateGameParams();
				var params = {};
				params.heroes = [];
				params.opponents = [];
				$(".selectedGarrisonRow").each(function () {
					var id = $(this).attr("id");
					var garrisonCharacter = Garrison.getGarrisonCharacter(id);
					params.heroes.push(garrisonCharacter);
					
				
				});		
			
				var opponent = {
						id : "Eternal Void",
						experience : Garrison.MaxXP.chapter4,
						characterName :"Eternal Void"
				};
				params.opponents.push(opponent);
				
				Game.params = params;
				window.location.href='#enterBattle';
			});
		},
		
		
		updateEnterBattlegroundButton : function() {
			$( "#enterBattlegroundContainer").unbind( "click" );
			if (GamePersist.getGameState().chapter <= 2) {
				if ($(".selectedGarrisonRow").size() == 0) {
					$("#enterBattlegroundContainer").removeClass("readyToEnterBattleground");
					$("#enterBattlegroundContainer").click(function() {
						alert("No hero has been selected yet!");
					});
				} else {
					this.redirectToEnterBattle();
				}				
			} else if (GamePersist.getGameState().chapter > 2) {
				if ($(".selectedGarrisonRow").size() < 3) {
					$("#enterBattlegroundContainer").removeClass("readyToEnterBattleground");
					$("#enterBattlegroundContainer").click(function() {
						alert("You must select 3 heroes.  Only " + $(".selectedGarrisonRow").size() + " has been selected so far");
					});
				} else {
					this.redirectToEnterBattle();
				}				
			}
		},
		
		updateEnterPortalButton : function() {
			$( "#enterPortalContainer").unbind( "click" );
			if (GamePersist.getGameState().chapter >= 4) {
				$("#enterPortalContainer").show();
			}
			if ($(".selectedGarrisonRow").size() < 3) {
				$("#enterPortalContainer").removeClass("readyToEnterPortal");
				$("#enterPortalContainer").click(function() {
					alert("You must select 3 heroes.  Only " + $(".selectedGarrisonRow").size() + " has been selected so far");
				});
			} else {
				this.redirectToEnterPortal();
			}
		},
		
		
		
		getLevel : function (experience) {
			// max XP == 100
			var retval = null;
			if (experience < Garrison.MaxXP.chapter1) {
				retval = experience;
			} else if (experience < Garrison.MaxXP.chapter2) {
				retval = 5 + Math.floor((experience - 5)/3);
			} else if (experience < Garrison.MaxXP.chapter3) {
				retval = 10 + Math.floor((experience - 20)/6);
			} else {
				retval = 15 + Math.floor((experience - 50)/10);
			}
			return retval;
		},
		
		addLevelBonus : function (garrisonCharacter, characterEntity) {
			var gameState = GamePersist.getGameState();
			
			if (garrisonCharacter.experience != null) {
				var level = this.getLevel(garrisonCharacter.experience);	
				characterEntity.maxHealth = Math.floor(characterEntity.maxHealth * Math.pow(1.1, level));
				characterEntity.curHealth = Math.floor(characterEntity.curHealth * Math.pow(1.1, level));
				characterEntity.damageMultiplier = Math.pow(1.1, level);
				characterEntity.healMultiplier = Math.pow(1.1, level);
				characterEntity.level = level;
				
				if (gameState.chapter > 1) {	
					if (characterEntity.has("PlayerCharacter")) {
						characterEntity.abilitiesInfo["Capture"] = { curCount: 0, lastUsed: 0};
					}
				}
				
			}
		},
			
		
		addGarrisonInfo : function (garrisonCharacter, characterEntity) {
			this.addLevelBonus(garrisonCharacter, characterEntity);
			characterEntity.id = garrisonCharacter.id;
		},
		
		addGarrisonCharacter : function (garrisonCharacter) {			
			var date = new Date();
			var gameState = GamePersist.getGameState();
			garrisonCharacter.id = GameHelper.createGUID();
			garrisonCharacter.createdTime = date.getTime(),
			garrisonCharacter.lastModifiedTime = date.getTime();
			gameState.garrison.push(garrisonCharacter);
			GamePersist.saveGameState(gameState);
		},
		
		addXP : function (garrisonCharacter) {
			var retval = 0;
			var gameState = GamePersist.getGameState();
			
			//var level = this.getLevel(garrisonCharacter.experience);
			if (gameState.chapter == 1) {
				retval = 1;				
			} else if (gameState.chapter == 2) {
				var randXP = Math.floor((Math.random() * 2)); 
				retval = 1 + randXP;
			}  else if (gameState.chapter == 3) {
				var randXP = Math.floor((Math.random() * 3));
				retval = 1 + randXP;
			} else if (gameState.chapter == 4) {
				var randXP = Math.floor((Math.random() * 4));
				retval = 1 + randXP;
			}				
			if (garrisonCharacter.experience + retval > Garrison.MaxXP["chapter" + gameState.chapter]) {
				retval = Garrison.MaxXP["chapter" + gameState.chapter] - garrisonCharacter.experience;
				garrisonCharacter.experience = Garrison.MaxXP["chapter" + gameState.chapter];
			} else{
				garrisonCharacter.experience += retval;
			}
			GamePersist.updateCharacter(garrisonCharacter);
			
			return retval;
		},
		
		addChapter : function () {
			var gameState = GamePersist.getGameState();
			if (!GamePersist.isCompleteGame()) {
				gameState.chapter++;
			} else {
				gameState.chapter = 5;
			}
			GamePersist.saveGameState(gameState);
		},
		
		getNumOfCharactersAtLevel : function(level) {
			var retval = 0;
			var garrison = Garrison.getGarrison();
			var garrisonSize = garrison.length;
			for (var i = 0; i < garrisonSize; i++) {
				var garrisonCharacter = garrison[i];
				var levelLoop = Garrison.getLevel(garrisonCharacter.experience);
				if (level == levelLoop) {
					retval++;
				}
			}
			return retval;
		},
		
		getProgress : function() {
			var retval = "";
			var gameState = GamePersist.getGameState();
			if (gameState.chapter == 1) {
				var garrisonCharacter = Garrison.getGarrison()[0];
				var level = Garrison.getLevel(garrisonCharacter.experience);
				var levelsRequiredToMeetObjectives = 5 - level;
				retval = "Current level of your elemental in your Garrison : " + level + "<br/>"
				+ "You need to level this elemental " + levelsRequiredToMeetObjectives + " level(s) " +
				"to meet the objectives of this chapter";
			} else if (gameState.chapter == 2) {
				var garrison = Garrison.getGarrison();
				var garrisonSize = garrison.length;
				retval = "Garrison size: " + garrisonSize;
				if (garrisonSize < 3) {
					var needThisManyMoreCharacters = 3 - garrisonSize;
					retval += " - you need to capture " + needThisManyMoreCharacters + " more characters<br/>";
				} else {
					retval += " - objective complete<br/>";
				}
				var levelRequirement = 10;
				var levelCount = Garrison.getNumOfCharactersAtLevel(levelRequirement);
				retval += "Number of Level " + levelRequirement + " Characters: " + levelCount;
				if (levelCount < 3) {
					var needThisManyMoreCharacters = 3 - levelCount;
					retval += " - you need to level " + needThisManyMoreCharacters + " more characters to Level " + levelRequirement + "<br/>";
				} else {
					retval += " - objective complete<br/>";				
				}
			} else if (gameState.chapter == 3) {
				var levelRequirement = 15;
				var levelCount = Garrison.getNumOfCharactersAtLevel(levelRequirement);
				retval += "Number of Level " + levelRequirement + " Characters: " + levelCount;
				if (levelCount < 3) {
					var needThisManyMoreCharacters = 3 - levelCount;
					retval += " - you need to level " + needThisManyMoreCharacters + " more characters to Level " + levelRequirement + "<br/>";
				} else {
					retval += " - objective complete<br/>";				
				}
			} else if (gameState.chapter == 4 && !GamePersist.isCompleteGame()) {
				retval = "The dark menace still awaits you on the other side of the portal ...";
			}
			return retval;
		},
		
		
		objectivesMet : function() {
			var retval = false;
			var gameState = GamePersist.getGameState();
			if (gameState != null) {
				var chapter = gameState.chapter;
				if (chapter == 1) {
					var garrisonCharacter = Garrison.getGarrison()[0];
					var level = Garrison.getLevel(garrisonCharacter.experience);
					if (level == 5) {
						retval = true;
					}
				} else if (chapter == 2) {
					var levelRequirement = 10;
					var levelCount = Garrison.getNumOfCharactersAtLevel(levelRequirement);				
					if (levelCount >= 3) {
						retval = true;
					}
				} else if (chapter == 3) {
					var levelRequirement = 15;
					var levelCount = Garrison.getNumOfCharactersAtLevel(levelRequirement);				
					if (levelCount >= 3) {
						retval = true;
					}
				} else if (chapter == 4) {
					retval = GamePersist.isCompleteGame();	
				}
			}
			return retval;
		},
		
		getNumberOfCapturedOpponents : function (opponents) {
			var retval = 0;
			for (var i = 0; i < opponents.length; i++) {
				var opponent = opponents[i];
				if (opponent.character.isCaptured) {
					retval++;
				}
			}
			return retval;
		},
		
		
};