Garrison = {
		MAX_XP : 100, // max XP
		
		getGarrison : function() {
			var gameState = GamePersist.getGameState();
			if (gameState == null) {
				return null;
			} else {
				return gameState.garrison;
			}
		},
		
		getGarrisonCharacter : function(id) {
			var retval = null;
			var garrison = this.getGarrison();
			for (var i = 0; i < garrison.length; i++) {
				var loopGarrisonCharacter = garrison[i];
				if (loopGarrisonCharacter.id == id) {
					retval = loopGarrisonCharacter;
					break;
				}
			}
			return retval;
		},
		
		updateEnterBattlegroundButton : function() {
			$( "#enterBattlegroundContainer").unbind( "click" );
			if (GamePersist.getGameState().chapter <= 2) {
				
			
				if ($(".selectedGarrisonRow").size() == 0) {
					$("#enterBattlegroundContainer").removeClass("readyToEnterBattleground");
					$("#enterBattlegroundContainer").click(function() {
						alert("No hero has been selected yet!");
					});
				} else {
					$("#enterBattlegroundContainer").addClass("readyToEnterBattleground");
					$("#enterBattlegroundContainer").click(function() {
						var id = $(".selectedGarrisonRow").attr("id");
						var garrisonCharacter = Garrison.getGarrisonCharacter(id);
						var params = {};
						params.heroes = [garrisonCharacter];
						var experience = garrisonCharacter.experience;
						var randomCharacter = GameHelper.getRandomCharacter(GameHelper.charactersArray);
						var opponent = {
								experience : experience,
								characterName :randomCharacter.name
						};
						params.opponents = [opponent];						
						Game.params = params;
						
						// hack
						//garrisonCharacter.experience = 1000;
						//opponent.experience = 1000;
						
						window.location.href='#enterBattle';
					});
				}
				
			}
		},
		
		getLevel : function (experience) {
			// max XP == 100
			var retval = null;
			if (experience < 5) {
				retval = experience+1;
			} else if (experience < 20) {
				retval = 5 + Math.floor((experience - 5)/3);
			} else if (experience < 50) {
				retval = 10 + Math.floor((experience - 20)/6);
			} else {
				retval = 15 + Math.floor((experience - 50)/10);
			}
			return retval;
		},
		
		addLevelBonus : function (garrisonCharacter, characterEntity) {
			if (garrisonCharacter.experience != null) {
				var level = this.getLevel(garrisonCharacter.experience);	
				//characterEntity.maxHealth = Math.floor(characterEntity.maxHealth * Math.pow(1.1, level));
				//characterEntity.curHealth = Math.floor(characterEntity.curHealth * Math.pow(1.1, level));
				characterEntity.damageMultiplier = Math.pow(1.1, level);
				characterEntity.healMultiplier = Math.pow(1.1, level);
				characterEntity.level = level;
			}
		},
		
		addGarrisonInfo : function (garrisonCharacter, characterEntity) {
			this.addLevelBonus(garrisonCharacter, characterEntity);
			characterEntity.id = garrisonCharacter.id;
		},
		
		addXP : function (garrisonCharacter) {
			var retval = null;
			var level = this.getLevel(garrisonCharacter.experience);
			if (level < 5) {
				retval = 1;
			} else if (level < 10) {
				var randXP = Math.floor((Math.random() * 2)); 
				retval = 1 + randXP;
			}  else if (level < 15) {
				var randXP = Math.floor((Math.random() * 3));
				retval = 1 + randXP;
			} else if (level < 20) {
				var randXP = Math.floor((Math.random() * 4));
				retval = 1 + randXP;
			}
			if (garrisonCharacter.experience + retval > Garrison.MAX_XP) {
				retval = 100 - garrisonCharacter.experience;
				garrisonCharacter.experience = Garrison.MAX_XP;
			} else{
				garrisonCharacter.experience += retval;
			}
			GamePersist.updateCharacter(garrisonCharacter);
			return retval;
		}
};