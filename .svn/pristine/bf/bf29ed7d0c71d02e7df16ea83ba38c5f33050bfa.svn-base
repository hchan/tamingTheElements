// Game scene
// -------------
// Runs the core gameplay loop
Crafty.scene('Game', function() {
	Global.Alert = Crafty.e("Alert");

	// A 2D array to keep track of all occupied tiles
//	this.occupied = new Array(Game.map_grid.width);
//	for (var i = 0; i < Game.map_grid.width; i++) {
//		this.occupied[i] = new Array(Game.map_grid.height);
//		for (var y = 0; y < Game.map_grid.height; y++) {
//			this.occupied[i][y] = false;
//		}
//	}

	
	
	// create player
	//this.player = Crafty.e('PlayerCharacter, CycloniusNoAI');	
	//his.player = Crafty.e('PlayerCharacter, PaxNoAI');
	this.player = Crafty.e('PlayerCharacter');
	
	
	/*
	this.player
    .Circle(40, "#FF0000")
    .tween({radius: 5, x: 0}, 500);
	*/
	
	// set player initial position
	
	
	//this.occupied[this.player.at().x][this.player.at().y] = true;

	
	// create enemy player
	//this.enemy = Crafty.e('EnemyCharacter , CycloniusWithAI');
	//this.enemy = Crafty.e('EnemyCharacter , SindarosaWithAI');
	//this.enemy = Crafty.e('EnemyCharacter , MorblassWithAI');
	var playerCharacterName = "Pax";
	var enemyCharacterName = "Pax";
	this.enemy = Crafty.e('EnemyCharacter');
	if (Game.params != null) {
		playerCharacterName = Game.params.hero;
		enemyCharacterName = Game.params.opponent;
	}
	this.player.addComponent(playerCharacterName);
	this.enemy.addComponent(enemyCharacterName);
	
	// set enemy initial position
	//console.log(Game.width())
	//this.occupied[this.enemy.at().x][this.enemy.at().y] = true;
	this.player.attr({ x: 2, y: (Game.height() + Game.hud_height-1.5*this.player._h )/2});	
	this.enemy.attr({ x: Game.width() -this.enemy._w-2, 
		y: (Game.height() + Game.hud_height - 1.5*this.enemy._h )/2});	
	this.enemy.targetPlayer = this.player;
	this.player.targetPlayer = this.enemy;
	
	
	// init HUD
	this.initHUD = function() {
		this.hudContainer = Crafty.e('HUDContainer');
		this.hudContainer.color(Game.backgroundColor);	
		this.hudContainer.attr({
			x: 0,
			y: 0,
			h: Game.hud_height,
			w: Game.width()
		});	
		var playerTopHUD = Crafty.e('topHUD');
		playerTopHUD.topHUD(2,2, this.player);
		this.player.setTopHUD(playerTopHUD);
		
		var enemyTopHUD = Crafty.e('topHUD');
		enemyTopHUD.topHUD(Game.width()/2,2, this.enemy);
		this.enemy.setTopHUD(enemyTopHUD);
	};
	this.initHUD();
	// init border
	this.topBorder = Crafty.e('Solid, Color');
	this.topBorder.color(Game.borderColor);
	this.topBorder.attr({
		x: 0,
		y: 0,
		h: Game.borderHeight,
		w: Game.width()
	});

	this.leftBorder = Crafty.e('Solid, Color');
	this.leftBorder.color(Game.borderColor);
	this.leftBorder.attr({
		x: 0,
		y: 0,
		h: Game.height(),
		w: Game.borderWidth
	});
	
	this.rightBorder = Crafty.e('Solid, Color');
	this.rightBorder.color(Game.borderColor);
	this.rightBorder.attr({
		x: Game.width()-Game.borderWidth,
		y: 0,
		h: Game.height(),
		w: Game.borderWidth
	});
	
	this.bottomBorder = Crafty.e('Solid, Color');
	this.bottomBorder.color(Game.borderColor);
	this.bottomBorder.attr({
		x: 0,
		y: Game.height()-Game.borderHeight,
		h: Game.borderHeight,
		w: Game.width()
	});
	
	Game.actionBar = Crafty.e('ActionBar');
	Game.actionBar.ActionBar(this.player, playerCharacterName);
	
	// Place a tree at every edge square on our grid of 16x16 tiles
//	for (var x = 0; x < Game.map_grid.width; x++) {
//		for (var y = 0; y < Game.map_grid.height; y++) {
//			var at_edge = x == 0 || x == Game.map_grid.width - 1 || y == 0 || y == Game.map_grid.height - 1;
//
//			if (at_edge) {
//				// Place a tree entity at the current tile
//				Crafty.e('Solid').at(x, y)
//				this.occupied[x][y] = true;
//			}
////			} else if (Math.random() < 0.06 && !this.occupied[x][y]) {
////				// Place a bush entity at the current tile
////				var bush_or_rock = (Math.random() > 0.3) ? 'Bush' : 'Rock'
////				Crafty.e(bush_or_rock).at(x, y)
////				this.occupied[x][y] = true;
////			}
//		}
//	}

	// Generate five villages on the map in random locations
//	var max_villages = 5;
//	for (var x = 0; x < Game.map_grid.width; x++) {
//		for (var y = 0; y < Game.map_grid.height; y++) {
//			if (Math.random() < 0.03) {
//				if (Crafty('Village').length < max_villages && !this.occupied[x][y]) {
//					Crafty.e('Village').at(x, y);
//				}
//			}
//		}
//	}
	
	// Play a ringing sound to indicate the start of the journey
	//Crafty.audio.play('ring');

	// Show the victory screen once all villages are visisted
	this.show_victory = this.bind('VillageVisited', function() {
		if (!Crafty('Village').length) {
			Crafty.scene('Victory');
		}
	});
	
	
}, function() {
	// Remove our event binding from above so that we don't
	//  end up having multiple redundant event watchers after
	//  multiple restarts of the game
	this.unbind('VillageVisited', this.show_victory);
});


// Victory scene
// -------------
// Tells the player when they've won and lets them start a new game
Crafty.scene('Victory', function() {
	// Display some text in celebration of the victory
	Crafty.background('url(' + GameHelper.assetsDir + "/victory.png" + ') no-repeat center center');
	Crafty.e('2D, DOM, Text')
		.text('You Win!')
		.attr({ x: 0, y: Game.height()/2 - 24, w: Game.width() })
		.textFont({ size: '24px', weight: 'bold'})
		.textColor("#FF0000")
		.css("textAlign", "center");
	
	var playAgain = Crafty.e('2D, DOM, Text, Mouse')
	.text('Play Again?')
	.attr({ x: 0, y: Game.height()/2 + 24, w: Game.width() })
	.textFont({ size: '24px', weight: 'bold'})
	.textColor("#FF0000")
	.css("textAlign", "center")
	.css("cursor", "pointer")
	.css("text-decoration", "underline");
	

	$( "#" + playAgain.getDomId() ).click(function() {
		//Crafty.stop();
		GameHelper.hideCrafty();
		GameHelper.removeAllEntities();
		$("#selectBattle").show();
	});
	
	// Give'em a round of applause!
	//Crafty.audio.play('applause');

	// After a short delay, watch for the player to press a key, then restart
	// the game when a key is pressed
//	var delay = true;
//	setTimeout(function() { delay = false; }, 5000);
//	this.restart_game = function() {
//		if (!delay) {
//			Crafty.scene('Game');
//		}
//	};
//	Crafty.bind('KeyDown', this.restart_game);
}, function() {
	// Remove our event binding from above so that we don't
	//  end up having multiple redundant event watchers after
	//  multiple restarts of the game
	//this.unbind('KeyDown', this.restart_game);
});


// YouJustDied
Crafty.scene('YouJustDied', function() {
	// Display some text in celebration of the victory
	Crafty.background('url(' + GameHelper.assetsDir + "/death.png" + ') no-repeat center center');
	Crafty.e('2D, DOM, Text')
		.text('You have been defeated...')
		.attr({ x: 0, y: Game.height()/2 - 24, w: Game.width() })
		.textFont({ size: '24px', weight: 'bold'})
		.textColor("#FF0000")
		.css("textAlign", "center");
	
	var playAgain = Crafty.e('2D, DOM, Text, Mouse')
	.text('Play Again?')
	.attr({ x: 0, y: Game.height()/2 + 24, w: Game.width() })
	.textFont({ size: '24px', weight: 'bold'})
	.textColor("#FF0000")
	.css("textAlign", "center")
	.css("cursor", "pointer")
	.css("text-decoration", "underline");
	

	$( "#" + playAgain.getDomId() ).click(function() {
		//Crafty.stop();
		GameHelper.hideCrafty();
		GameHelper.removeAllEntities();
		$("#selectBattle").show();
	});

	// Give'em a round of applause!
	//Crafty.audio.play('applause');

	// After a short delay, watch for the player to press a key, then restart
	// the game when a key is pressed
//	var delay = true;
//	setTimeout(function() { delay = false; }, 5000);
//	this.restart_game = function() {
//		if (!delay) {
//			Crafty.scene('Game');
//		}
//	};
//	Crafty.bind('KeyDown', this.restart_game);
}, function() {
	// Remove our event binding from above so that we don't
	//  end up having multiple redundant event watchers after
	//  multiple restarts of the game
	//this.unbind('KeyDown', this.restart_game);
});

// Loading scene
// -------------
// Handles the loading of binary assets such as images and audio files
Crafty.scene('Loading', function(){
	// Draw some text for the player to see in case the file
	//  takes a noticeable amount of time to load
	Crafty.e('2D, DOM, Text')
		.text('Loading; please wait...')
		.attr({ x: 0, y: Game.height()/2 - 24, w: Game.width() })
		.textFont($text_css);

	var assets = Global.assets;
	// Load our sprite map image
	
	var funcPostLoad = BeginGame;
	Crafty.load(assets, LoadAssets(assets, funcPostLoad));
	
});

var BeginGame = function (params) {
	Crafty.scene('Game', params);
};

var LoadAssets = function(assets, funcPostLoad){
	// Once the images are loaded...

	
	
	
//	// Define our sounds for later use
//	Crafty.audio.add({
//		knock:    ['assets/door_knock_3x.mp3', 'assets/door_knock_3x.ogg', 'assets/door_knock_3x.aac'],
//		applause: ['assets/board_room_applause.mp3', 'assets/board_room_applause.ogg', 'assets/board_room_applause.aac'],
//		ring:     ['assets/candy_dish_lid.mp3', 'assets/candy_dish_lid.ogg', 'assets/candy_dish_lid.aac'],
//		//laser1:		['assets/laser1.ogg'],
//		//laser2:		['assets/laser2.ogg'],
//	});
	
	for (var i = 0; i < assets.length; i++) {
		var asset = assets[i];
		var assetKey = asset;
		assetKey = assetKey.replace("assets/", "");
		if (asset.endsWith(".ogg")) {
			assetKey = assetKey.replace(".ogg", "");
			try {
				Crafty.audio.add(assetKey, asset);
			} catch (e) {
				console.log(e);
			}
		}			
	}
	
	GameHelper.createSpriteComponent('spr_StormBlue', 'assets/spriteStormBlue.png', [17, 17, 63, 87]);
	GameHelper.createSpriteComponent('spr_blueBullet', 'assets/spriteBullet.png', [64, 1, 8, 8]);
	GameHelper.createSpriteComponent('spr_redBullet', 'assets/spriteBullet.png', [0, 1, 9, 9]);
	GameHelper.createSpriteComponent('12px-blue-comet', null, [0, 0, 27, 14]);
	GameHelper.createSpriteComponent('redFireBullet', null, [0, 0, 74, 26]);
	GameHelper.createSpriteComponent('redDragon', null, [0, 0, 285, 257]);
	GameHelper.createSpriteComponent('waterSprite', null, [0, 0, 290, 294]);
	GameHelper.createSpriteComponent('icicleBullet', null, [0, 0, 345, 181]);
	GameHelper.createSpriteComponent('rockElemental', null, [0, 0, 400, 408]);
	GameHelper.createSpriteComponent('rockElementalRed', null, [0, 0, 400, 408]);
	GameHelper.createSpriteComponent('rockBullet', null, [0, 0, 204, 163]);
	GameHelper.createSpriteComponent('rockExplosion', null, [0, 0, 639, 663]);
	GameHelper.createSpriteComponent('adrenaline', null, [0, 0, 52, 53]);
	GameHelper.createSpriteComponent('tornado', null, [0, 0, 300, 300]);
	GameHelper.createSpriteComponent('flame', null, [0, 0, 400, 400]);
	GameHelper.createSpriteComponent('iceBlast', null, [0, 0, 118, 114]);
	GameHelper.createSpriteComponent('wispera', null, [0, 0, 400, 400]);
	GameHelper.createSpriteComponent('handGrabbing', null, [0, 0, 982, 729]);
	GameHelper.createSpriteComponent('sonarBlast', null, [0, 0, 664, 313]);
	GameHelper.createSpriteComponent('fiara', null, [0, 0, 400, 400]);
	GameHelper.createSpriteComponent('fireball', null, [0, 0, 400, 250]);
	GameHelper.createSpriteComponent('fireHeal', null, [0, 0, 405, 400]);
	GameHelper.createSpriteComponent('iceSheet', null, [0, 0, 165, 100]);
	GameHelper.createSpriteComponent('curomo', null, [0, 0, 400, 400]);
	GameHelper.createSpriteComponent('iceShock', null, [0, 0, 623, 246]);
	GameHelper.createSpriteComponent('iceShard', null, [0, 0, 645, 90]);
	GameHelper.createSpriteComponent('rokcore', null, [0, 0, 400, 400]);
	GameHelper.createSpriteComponent('rokcoreRockArmour', null, [0, 0, 400, 400]);
	GameHelper.createSpriteComponent('rockPellet', null, [0, 0, 233, 54]);
	GameHelper.createSpriteComponent('rockArmour', null, [0, 0, 476, 590]);
	GameHelper.createSpriteComponent('echo', null, [0, 0, 300, 300]);
	GameHelper.createSpriteComponent('echoFade', null, [0, 0, 300, 300]);
	GameHelper.createSpriteComponent('hurricane', null, [0, 0, 400, 400]);
	GameHelper.createSpriteComponent('fade', null, [0, 0, 92, 94]);
	GameHelper.createSpriteComponent('lavax', null, [0, 0, 400, 400]);
	GameHelper.createSpriteComponent('crimsonFire', null, [0, 0, 250, 200]);
	
	
	
	
	
	// Now that our sprites are ready to draw, start the game
	funcPostLoad();
};